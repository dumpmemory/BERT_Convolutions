"""
Combines and shuffles the input cached datasets (generated by LineByLineTextDataset).
If using output_fromat 'string', then outputs a text file in the output format
needed by IterableTextDataset.
"""

from __future__ import unicode_literals

import os
import codecs
import argparse
import random
import pickle

def create_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('--input_dir')
    parser.add_argument('--output_format', default="string") # list or string
    parser.add_argument('--output_file', default="output.txt")
    return parser

def main(directory, output_format, output_file):

    # Each example is a list of sequence_length integers.
    examples = []

    for root, dirs, files in os.walk(directory):
        for fname in files:
            filename = os.path.join(root, fname)
            print("Reading " + filename)
            with open(filename, "rb") as handle:
                examples.extend(pickle.load(handle))

    print("Shuffling.")
    random.shuffle(examples)
    num_examples = len(examples)

    print("Writing.")
    if output_format == 'string':
        outfile = codecs.open(output_file, 'w', encoding='utf-8')
        separator = ' '
        for example in examples:
            outfile.write(separator.join(str(token_id) for token_id in example))
            outfile.write('\n')
    else:
        with open(output_file, "wb") as handle:
            pickle.dump(examples, handle, protocol=pickle.HIGHEST_PROTOCOL)
    print('Done; final example count: {0}'.format(num_examples))

if __name__ == '__main__':
    parser = create_parser()
    args = parser.parse_args()
    main(args.input_dir, args.output_format, args.output_file)
